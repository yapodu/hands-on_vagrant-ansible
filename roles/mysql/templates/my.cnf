# Ryo Tamura / yapodu.jp
# http://time-complexity.blogspot.jp/2013/10/mysqlmycnf.html
# http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html 

[mysqld]     
##--------------------------------------------------------------------
# mysqldの基本設定
##--------------------------------------------------------------------
# id は 1 から 2^32 -1 個の間で唯一の値になる必要がある
# server-idはReplicationを使うときには重複されてはいけない
# 単一システムの場合はDefaultの１で十分
server-id = 1

# サーバーを起動するユーザーの指定
user = mysql
# サーバーのポート指定
port = 3306

# MySQLがインストールされているディレクトリ、
# MySQLバイナリのインストールディレクト
### basedir = 
# データベースのデータを格納するデータディレクトリ、
# このディレクトリの所有権とグループはuserで指定したユーザーにする必要がある
# yum でインストールした際は自動設定されている
datadir = /var/lib/mysql
# このディレクトリはMysqlサーバーが内部的に作業をするときに臨時ディレクトリとして使う
# 例えば、大量のselect処理のため、臨時テーブルを作ったりする場合、ここにファイルが生成される。
tmpdir  = /tmp

# socker と pid-file の yumデフォルト
socket  = /var/lib/mysql/mysql.sock
pid-file = /var/run/mysqld/mysqld.pid

# 文字セット指定
# default-character-set = utf8 # befor 5.5
character-set-server = utf8
# コロケーションコードの設定
# 乱暴にいうとデータベースの並び順を決定する物
collation-server = utf8_general_ci

# ストレートエンジンの指定
default-storage-engine  = innodb

# トランザクション分離レベル デフォルトは REPEATABLE-READ
# デッドロック回避のため一般的な使用ならREAD-COMMITTED
# 気になったら transaction isolation dead lock でググる
transaction-isolation = READ-COMMITTED

# クライアントIPを逆引きしない
skip-name-resolve

# 処理を同時に実行できるスレッド数の上限値
# 処理を並列に行うとスループット(単位時間当たり処理量)の向上が期待出来るが、
# 同時に実行中のスレッドがあまりに多すぎるとロックの競合が多発してしまって返って性能を落とす原因になってしまう
# 上限値にThreadが達するとFIFOのQueueに待機状態になる。
# 5.5以降はinnodb_commit_concurrencyとともにデフォルト(無制限)が問題ない模様
# http://sugamasao.hatenablog.com/entry/2015/03/19/094050
# Default 0 (infinite concurrency)
innodb_thread_concurrency = 0

# 同時にコミットできるスレッドの数
innodb_commit_concurrency = 0

# InnoDB に同時に入る事ができるスレッドの数
# スレッドが InnoDB に入ろうとする時にもしinnodb_thread_concurrencyの限度までスレッド数が達していたら、それらは列になる
# Default 500
# Dynamic 設定も可能 SET GLOBAL innodb_concurrency_tickets = 500
innodb_concurrency_tickets = 500


# Mysql 6.0 で 実装予定? のThreadPool機能 mariadb なら使える
#thread_handling = pool-of-threads
#thread_pool_size = 32
#thread_pool_max_threads = 1024
#thread_pool_idle_timeout = 10

# 最大接続数
# Dynamicの設定も可能。 SET GLOBAL max_connections = 300
max_connections = 300

# Mysqlに接続可能なUserごとの最大同時接続者。 Defaultは0(Unlimited)である
max_user_connections = 0

# クライアントからのエラー回数許容値、これを超えると接続をブロック
max_connect_errors = 1000000

# セッション変数のwait_timeoutの設定。
# グローバルのwait_timeout値か、interactive_timeout値かのどちらかになるが、それはクライアントのタイプによるとのこと。
# 接続の「アイドル状態が一定時間続くと」MySQL 側から自動的に接続を切る設定、デフォルトは8時間
# 詳細は下記参照
# http://qiita.com/satococoa/items/e3396d9d75b9cf7e6214 
# http://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_wait_timeout
wait_timeout = 28800
interactive_timeout = 28800 

# 'Bad handshake'に応答する前にPacketの接続を待っている時間。
connect_timeout = 10

# client からの最大クエリパケットサイズ
# 単位は byte, Defaultは 1048576(1MB) 。限界値は 1GB
max_allowed_packet = 33554432

##--------------------------------------------------------------------
# Logging
##--------------------------------------------------------------------
# 一般的なQueryのLog(general query log)とSlow Query Log(slow query log)が出力される場所を指定する
# このオプションは他のオプションより強い権限がある。　この値が NONE の場合には、の他のオプションでログを記録するように設定しててもログは記録されない。
# Dynamic での設定も可能 SET GLOBAL log_output = FILE
log_output = FILE 
 
# Aborted connection..のような警告を error Logに書く。 Replicationを使っている場合、このオプションを使うのをお勧めする
# Defaultは 1.
# Dynamic の設定が可能である。 SET GLOBAL log_warnings = 131072
log_warnings = 1

# エラーとかMysqlのStartのログファイルを指定。
# ファイル名を指定しないと host_name.err を使用する。　拡張子を指定しないと .err が自動的に付く。
# Defaultはない。 Dynamic の設定は出来ない。
log_error = /var/log/mysql/mysqld_error.log

# 一般的なQueryログ(general query log)の使用有無を決める。 log_output の値が NONE なら、この値は無視される。
# Defaultは 0(0=OFF or 1=ON)
# Dynamic の設定も可能。 SET GLOBAL log_output = 0
general_log = 0

# general_log の出力先、ファイル名を指定しないと host_name.log になる。
# Dynamic で設定可能。SET GLOBAL general_log_file =/var/log/mysql/general_query_all.log
#log = /var/log/mysql/general_query_all.log # before MySQL5.5
general_log_file = /var/log/mysql/general_query_all.log


# 管理用のステートメント(OPTIMIZE TABLE、ANALYZE TABLE、ALTER TABLE など) についても同様に処理に時間がかかるものをロギングしたい場合に指定
# Default は設定なし
# Dynamic の設定は出来ない。
log_slow_admin_statements

# インデックスしていないクエリを全て出力する場合に指定
# デフォルトは 0(0=OFF or 1=ON)
# Dynamic の設定可能 SET GLOBAL log_queries_not_using_indexes = 1;
log_queries_not_using_indexes = 1

# Slow Query Logを記録するかどうかを決める。
# Default 0(0=OFF or 1=ON)
# Dynamic の設定は可能。 SET GLOBAL slow_query_log = 0
slow_query_log = 1

# この秒数より大きい処理はスロークエリログに出力される
long_query_time = 2

# Slow Query Logファイルを指定
# ログファイル名を設定しないと host_name-slow.log になる
# Dynamic で設定も可能。 SET GLOBAL slow_query_log_file = /var/log/mysql/slow_query.log
#log_slow_queries=/var/log/mysql/slow-query.log # before MySQL5.5
slow_query_log_file = /var/log/mysql/slow_query.log

# バイナリログを使う場合は
# ログファイルの名前を入力する。ダイナミック設定不可
log_bin = /var/log/mysql/bin.log

# バイナリログを自動削除する日数
# Deafult 0.
# Dynamic の設定は可能。 SET GLOBAL expire_logs_days = 5
expire_logs_days = 5

# レプリケーションフォーマット
# Dynamic の設定は可能。 SET GLOBAL binlog_format = 'MIXED';
# 安全なSTATEMENTではエラーとなるケースがある、基本はMIXDで
binlog_format = MIXED


##--------------------------------------------------------------------
# CacheとMemory
##--------------------------------------------------------------------

### バッファは単純に多く割り当てればいいわけではない、メモリの割り当てがオーバーヘッドになったり
### バッファを増やしすぎたためにメモリ不足になりスワップが発生したりする

# thread_cache_size = threadをcacheにいくつ保存しておくのかを決める
# 基準はQuestionsではなくConnectionsである。
# MySQLは接続終了後のサーバスレッドをいきなり解放せず、次の接続時に再利用
# できるようにキャッシュして置く。このため、切断後の再接続時のオーバーヘッド
# をより軽減することができるのだ。デフォルトは0だが数百程度でもいいようだ。
# 細かいチューニングは実際の稼働状況を把握しないと何とも言えないが、とりあえず
# max_connectionsの１/３ぐらいか
# show statusの(Threads_created / Connections)の結果が
# 0.01 すなわち 1% 以上なら、 thread_cache_size を増やす必要があると判断
# 同時接続者が多ければ多いほどこの値を増やす必要があるが、メモリの使用率も一緒に増える
# Default 0.　単位はスレッドの数
# Dynamic で設定も可能だ。 SET GLOBAL thread_cache_size = 52
thread_cache_size = 100

# すべてのThreadが開いてCacheができるTableの数。　この値が増えると mysqld は file descriptors を増やす
# Default 5.6.8以降は2000、それ未満は400.
# Dynamic で設定も可能。 SET GLOBAL table_open_cache = 400
#table_cache = 512 # before MySQL5.5
table_open_cache = 2000

# MEMORYテーブル（旧HEAPテーブル）はMEMORYストレージエンジンによってメモリ上に作成されるテーブル。MEMORYテーブルはmax_heap_table_sizeを超えるテーブルを作成できない
# 単位は byte. Defaultは 16777216(16MB)である
# Dynamic で設定も可能。 SET GLOBAL max_heap_table_size = 16777216
max_heap_table_size = 33554432

# Memoryに生成される臨時のTableの最大の値。　Memoryに生成されるTable値がこの値を超えると MySQLはDiskに MyISAM Tableに変換する。
# Queryに GROUP By が多くて、メモリも十分な状態なら、この値を増やす必要がある。
# この値はユーザーが生成する Memory Tableには影響を与えない。
# 逆にmax_heap_table_sizeによっても制約されるため、tmp_table_sizeを大きくする場合は同時にmax_heap_table_sizeも大きくする
# 単位は Byte. DefaultはSystemに依存する。
# SHOW GLOBAL STATUS で、 'Created_tmp_disk_tables' と 'Created_tmp_tables' に該当の統計情報が記録されてある。
# Dynamic で設定も可能だ。 SET GLOBAL tmp_table_size = 524288
tmp_table_size = 524288


# ソートの際に利用される領域。ORDER BYやGROUP BYを多用するのであればこの値も増やした方がいい。
# 各Sectionで整列のために与えられたBufferの大きさ。 この値はどのストレージエンジンに特化されたものではなく、最適化をするための一般的な値だ。
# SHOW GLOBAL STAUS で、　秒(より)/ 'Sort_merge_passes' の値が多く感じたらQueryを改善するかIndexを改善する代わりに、この値を増やしてみるのもいい方法だ
# 単位は Byte. Default 2MB 
# Dynamic 設定は可能。 SET GLOBAL sort_buffer_size = 2097144
sort_buffer_size = 1MB #128kb


# 全件スキャンをするときに利用するバッファ。
# MyISAM Tableに対して各Threadが sequentail scan をしようとしたときにこの大きさ分、Bufferを割り当てる。
# sequentail scan がよく発生するとこの値を増やす必要があるが基本的にはindexで対応すべき。
# 単位は Byte. Default 131072 (128K) 。
# Dynamic 設定も可能。 SET GLOBAL read_buffer_size = 16777216
read_buffer_size = 524288

# ソート処理でインデックスを利用する場合に利用するバッファ。 
# 512kb～2MBで確認して決めるべき
# ORER BY をたくさん使っているのであれば、この値を増やすと、Performance向上の効果が期待できる
# 単位は Byte. Default 262144(256K) 。
# Dynamic 設定は可能だ。 SET GLOBAL read_rnd_buffer_size = 131072
read_rnd_buffer_size = 1MB

# JOINバッファはインデックスを使わない結合に使うメモリ上の領域。
# indexを使わないテーブル結合は避けるべきでなので基本的にはindexで対応すべき
# 単位は Byte.
# Dynamic 設定は可能だ。 SET GLOBAL join_buffer_size = 131072
join_buffer_size = 131072

# SELECT文の結果をキャッシュするクエリキャッシュ機能
# アクセスがシングルスレッドで実行されているため複数のクライアントからアクセスされている環境ではボトルネックに。
# またフラグメントが起きやすく，処理効率が低いためデフォルト無効，設定非推奨。
# http://gihyo.jp/dev/serial/01/MySQL-tuning-scale/0006?page=2
# query_cache_limit は各QueryごとにCacheサイズ。 この値より大きいQuery結果はCacheしない。
# Dynamic 設定可能 SET GLOBAL query_cache_size = 131072
query_cache_type = 0
query_cache_size = 0
query_cache_limit = 1048576

# 一つのQueryごとの結果をCacheする量を制限する。 query_cache_sizeはQueryの結果をCacheする全体のメモリの量を設定するパラメタで
# query_cache_limit は各QueryごとにCacheする結果の量を意味する。 この値より大きいQueryの結果の場合はCacheしないという意味。
# 単位は Byte. Default 1048576(1M).
# Dynamic 設定可能 SET GLOBAL query_cache_limit = 131072
#query_cache_limit = 0
query_cache_limit = 2097152

##--------------------------------------------------------------------
# InnoDB behavior
##--------------------------------------------------------------------

# InnoDBのBackground　Threadである、I/O ThreadのRead/WriteのThreadの数を決める
# innodb_read_io_threads のDefault： 4
# innodb_write_io_threads のDefault： 4
# Dynamic 設定可能。
innodb_read_io_threads = 4
innodb_write_io_threads = 4

# バックグラウンドでのI/O処理(IOPS)の割り当て
# フォアグランドでもI/Oが発生するためIOPSカタログ値全割当は危険
# またinnodb_io_capacity_max より大きい値は指定できない
# innodb_io_capacity_maxはinnodb_io_capacityの2倍の値までバックグラウンドスレッドがIOPSことになるので良くてクエリー激重、最悪mysqlの突然の死!!!
# Default 200 # Dynamic 設定可能。
# とりあえずこれで様子見
# デフォルト値：200
# RAID：500 ～ 1000
# SSD：2000 ～ 5000
# IO-Drive2:10000 ～ 50000
innodb_io_capacity_max = 500
innodb_io_capacity = 500

# 統計情報自動更新
# default 5.6.6以降は0
# メタデータアクセス時(SHOW TABLESとか)にANALYZE TABLE相当の処理を走らせる、オフにしても一定行更新されたら自動でANALYZEされるとかの機能は今までどうり
innodb_stats_on_metadata = 0

# innodb での dirty pages (更新された領域)のパーセンテージを超えないために InnoDBは buffer poolをデータFlushを(flush)実施する
# Default 75
# Dynamic 設定可能。 SET GLOBAL innodb_max_dirty_pages_pct = 75
innodb_max_dirty_pages_pct = 90

# 特定の条件について警告をらターンするかエラーをリターンするかを決める strict SQL mode と類似している
# Default 0
# Dynamic 設定可能。 SET GLOBAL innodb_strict_mode = 1
innodb_strict_mode = 1

# auto-increment の値を生成するときに lock mode を決める 0,1,2
# Default 1
# 生成された値が飛び番号になる際は、変更してみる。
# Dynamic 設定可能。
innodb_autoinc_lock_mode = 1

# 更新系が発生されると補助インデックスがすぐ反映されずにメモリにBufferingにされる機能。
# inserts, deletes, purges, changes, all, noneの中で選べる
# Default all.
# バグが存在してたが修正済み http://yoku0825.blogspot.jp/2012/10/mysql55.html
# Dynamic 設定可能。 SET GLOBAL innodb_change_buffering = inserts
innodb_change_buffering = all


# InnoDBバッファプールはOLD、NEWという2つの領域に分けられています。ディスクから読み込まれたデータはまずOLD領域に格納され、もう一度アクセスされるとNEW領域に移動します。
# 本パラメータを設定すると、指定した時間はデータがNEW領域に移動しないようになります。ごくまれにしかアクセスしないデータによって、よくアクセスされるデータが押し流されないようにする機能です。単位はミリ秒です。
# 意図的にInnoDBバッファプールをウォームアップするときにはかえって邪魔になりますので、必要に応じて設定を変更してください。
# default 5.6.6 以降 1000 , 未満 0
innodb_old_blocks_time = 1000

##--------------------------------------------------------------------
# InnoDB base
##--------------------------------------------------------------------
# InnoDBをメインで使うなら、一番重要なパラメータ。
# InnoDBに対する各種操作の他、レコードデータなどのキャッシュ領域として利用され、
# 非同期I/Oスレッドやサーバスレッドがアクセスする。InnoDBバッファプール上
# データへのアクセスにはディスクI/Oが発生しないが、バッファプール内に収まり
# きらなくなったデータはディスク上に退避されることになる。
# InnoDBがテーブルもしくはインデックスデータをCacheするためのBuffer Poolサイズ
# ※この値を大きく設定するとDiskのI/Oを減らしてくれる
# InnoDB 専用サーバーなら物理的なメモリの80%を割り当てても問題ない
# Default 134217728 (128MB)
# Dynamic 設定可能。
innodb_buffer_pool_size = 512MB #1073741824

# InnoDB のデータファイルの位置を指定
innodb_data_home_dir = /var/lib/mysql

# innodbのファイルフォーマットを指定する
# Antelopeが従来のフォーマット、Barracudaが圧縮機能をサポートした新しいフォーマット
# innodb_file_per_table が無効の場合は勝手にAntelope相当の状態にフォールバックされる
# http://yoku0825.blogspot.jp/2014/10/innodbfileformat-antelopebarracuda.html
# Default Antelope
# Dynamic 設定可能。SET GLOBAL innodb_file_format = Barracuda
innodb_file_format = Barracuda

# テーブルごとにデータファイルを分割する機能
# 拡張子は .ibd
# Default 5.6.6以降は1 それ未満は0
# Dynamic 設定可能。 SET GLOBAL innodb_file_per_table = 1
innodb_file_per_table = 1

# InnoDB データファイルとその大きさを指定
# Default 10MB ib_data:100M:autoextend
# 基本的には
# innodb_file_format = Barracuda
# innodb_file_per_table = 1
# でデータ分割しているので本項目は共有テーブルスペースの名前とサイズ指定を行うことになる
# ロールバック情報等が含まれるので大きくなる可能性がある、自動拡張で多くなり過ぎないよう
# ある程度の大きさを確保したほうがよい http://nippondanji.blogspot.jp/2009/01/innodb_16.html
# 大きさは正直運用してみてないと正確な値はわからないのでとりあえず2GBの拡張あり
innodb_data_file_path=ibdata1:2G:autoextend:max:100G  

# テーブルスペースの自動拡張サイズをメガバイト単位で指定。innodb_data_file_pathの自動拡張と関連する
# 単位はMB defaultは64 ダイナミック可
innodb_autoextend_increment = 64  

# InnoDB redo log ファイルが生成されるディレクトリを指定。生成されるファイル数はinnodb_log_files_in_groupで指定。
# InnoDB 値を指定しないと 5MB 大きさの ib_logfile0, ib_logfile1 二つのファイルが生成される。
# Dynamic 設定可能。
innodb_log_group_home_dir = /var/lib/mysql

# InnoDB 停止オプションとりあえずデフォルトの1で様子見
# http://yoku0825.blogspot.jp/2015/02/innodbfastshutdowninnodb_93.html
# innodb-fast-shutdown InnoDBログのフラッシュ ダーティーページのフラッシュ バックグラウンド非同期処理
# 0 シャットダウン時 シャットダウン時 シャットダウン時
# 1(default) シャットダウン時 シャットダウン時 次のスタートアップ以降、非同期
# 2 シャットダウン時 次のスタートアップ時(クラッシュリカバリー) 次のスタートアップ以降、非同期
# ダイナミック可
innodb_fast_shutdown = 1

# ロググループのログファイル数を指定
# Default 2 
# Dynamic 設定可能。
innodb_log_files_in_group = 4
 
# ロググループの各ログファイルのサイズを決める。 1MBから innodb_buffer_pool_size/innodb_log_files_in_group で出た値を設定する
# Default 5MB
# Dynamic 設定可能。
innodb_log_file_size = 268435456

# InnoDBログパッファはInnoDBテーブルに対する更新ログ、いわゆるトランザクションログを管理し、
# InnoDB専用スレッドやサーバスレッドがアクセスする領域。Oracleで言うとREDOログに相当する。
# １つのトランザクション内で多くのデータを更新するのであればサイズを大きくした方がいいが基本優先度低
# Default 8388608 (8MB)
# Dynamic 設定可能。
innodb_log_buffer_size = 16777216

# InnoDBの内部データなどを保持するための領域。足りなくなったらエラーがでるので少なくてもいい。
innodb_additional_mem_pool_size = 8MB


# XA Transactionで two-phase commit を支援するかどうかを決める。
# FALSEすると、トランザクションがコミットされた順番でバイナリログに載ることが保証できなくなる
# Default TRUE
# Dynamic 設定可能。 SET GLOBAL innodb_support_xa = TRUE
innodb_support_xa = TRUE

# 処理を同時に実行できるスレッド数の上限値
# 処理を並列に行うとスループット(単位時間当たり処理量)の向上が期待出来るが、
# 同時に実行中のスレッドがあまりに多すぎるとロックの競合が多発してしまって返って性能を落とす原因になってしまう
# 上限値にThreadが達するとFIFOのQueueに待機状態になる。
# Default 0 (infinite concurrency)
# Dynamic 設定可能。 SET GLOBAL innodb_thread_concurrency = 1
innodb_thread_concurrency = 100 #0

# 処理を同時に実行できるスレッド数の上限値
# 処理を並列に行うとスループット(単位時間当たり処理量)の向上が期待出来るが、
# 同時に実行中のスレッドがあまりに多すぎるとロックの競合が多発してしまって返って性能を落とす原因になってしまう
# 上限値にThreadが達するとFIFOのQueueに待機状態になる。
# Default 0 (infinite concurrency)
# Dynamic 設定可能。 SET GLOBAL innodb_thread_concurrency = 1 
innodb_thread_concurrency = 100 #0

# InnoDB transactionが row lock がかかった時に、待つ時間
# Default 50. 単位は秒(second)
# Dynamic 設定可能。 SET GLOBAL innodb_lock_wait_timeout = 50
innodb_lock_wait_timeout = 60

# InnoDBで、TransactionがCommitされるたびに、Flush log Diskに書くかどうかを決める
# innodb_flush_log_at_trx_commitの設定値 0 1  2
# ログファイルへの書き込み                 1秒毎 commit毎 commit毎
# ディスクとの同期                         1秒毎 commit毎 1秒毎
# パフォーマンス                         高 低  中
# 安全性                                 低 高  中
# 備考                                 デフォルト  
# Default 1
# Dynamic 設定可能。 SET GLOBAL innodb_flush_log_at_trx_commit = 1
innodb_flush_log_at_trx_commit = 2

# MySQL サーバーが起動される際に InnoDBを復旧作業を実行するが, 復旧作業がうまくいかなかったら復旧されない。
# この時、この値を指定してサーバを始めると各数字に沿って復旧のレベルが決められる。
# デフォルトは 0 (強制的な復旧を行わない通常の起動) 
# Dynamic 設定可能。
innodb_force_recovery = 0

# UNIX/Linuxにおいてデータファイル、ログファイルの読み書き方式を指定するためのもの
# とりあえずMySQL以外にメモリが必要な際はfdatasync、それ以外はO_DIRECT
# fdatasyncではfsyncがデバイスへの書き込み
# O_DIRECTを使う場合はダイレクトI/Oによってデバイスへ、ページキャッシュを経由しないで書き込み
# 5.6.7からめちゃくちゃ増えた http://yoku0825.blogspot.jp/2013/09/innodbflushmethod.html
# Default fdatasync
# Dynamic 設定可能。
innodb_flush_method = O_DIRECT

# この機能を使うと InnoDBはデータを２回保存する、１回目はdoublewrite buffer,
# ２回目は実際の data files 書く。OFFにしている人が多いが不安なので有効にした。
# Default 1
# Dynamic 設定可能。
innodb_doublewrite = 1

# 有効ならLOCK TABLES 操作は各テーブルに 2 つのロックを取得
innodb_table_locks = 1

# 同時にCommitができるThreadの数。 0 は制限なし
# Defaultは 0
# この設定はRuntimeで　０　には変更できない
# ０　以外は変更できる
# 制限が入って Dynamic 変更可能。 SET GLOBAL innodb_commit_concurrency = 100
innodb_commit_concurrency = 0

#QL5.6.6 より前のバージョンでは、timestamp 型の列をテーブルに含める場合、明示的に属性を指定しなくても、NOT NULL などの属性が自動で付与されていたが暗黙的な属性付与は非推奨になった。
explicit_defaults_for_timestamp = TRUE

##--------------------------------------------------------------------
# mysqldump
##--------------------------------------------------------------------
[mysqldump]
 
# TableをDumpするときに、 MySQLはサーバのメモリをBufferingする。　でも大きいテーブルをDumpするときに、メモリBufferingをするとサーバに問題が起きる可能性がある。
# このメモリBufferingを消すためのパラメタ。
# Default：メモリBuffer使用する
quick
 
 
# ユーザプロセスとサーバスレッドの間で、SQL文による問合せやその結果をやりとりする際に
# 使用される領域の最大サイズを指定する。
# これより大きなサイズのデータ通信はできない。
# デフォルトは1Mだが、大きなサイズのデータを扱う場合はこの値も大きくした方がいい。
# Default 1M
max_allowed_packet = 32MB #33554432


##--------------------------------------------------------------------
# mysql console
##--------------------------------------------------------------------
[mysql]
 
# mysql で、Defaultの文字セット指定
default-character-set = utf8
 
# コマンドの自動完成機能、
# あれば、楽だがシステムのメモリを使うため、使わない方がいい
no-auto-rehash
 
# MySQL で、警告(Warning)が発生すると表示はせず、その結果に警告があるかどうかだけ、出るようになっていて、 "SHOW WARNINGS;"を利用してみなければならないが
# 警告が発生するとそのまま表示してくれるように設定できる
show-warnings
 
# MySQL ClientのPromptを変更する
prompt=\u@\h:\d\_\R:\m:\\s>
 
# paging 機能を支援する。
pager="less -n -i -F -X -E"
 
##--------------------------------------------------------------------
# mysql client
##--------------------------------------------------------------------
[client]
default-character-set = utf8
port = 3306



